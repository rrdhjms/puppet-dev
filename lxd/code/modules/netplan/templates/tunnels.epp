<%- | 
  String                                                          $name,

  # common properties
  Optional[Enum['networkd', 'NetworkManager']]                    $renderer = undef,
  #lint:ignore:quoted_booleans
  Optional[Variant[Enum['true', 'false', 'yes', 'no'], Boolean]]  $dhcp4 = undef,
  Optional[Variant[Enum['true', 'false', 'yes', 'no'], Boolean]]  $dhcp6 = undef,
  #lint:endignore
  Optional[Boolean]                                               $ipv6_privacy = undef,
  Optional[Tuple[Enum['ipv4', 'ipv6'], 0]]                        $link_local = undef,
  Optional[Boolean]                                               $critical = undef,
  Optional[Enum['mac']]                                           $dhcp_identifier = undef,
  Optional[Struct[{
    Optional['use_dns']         => Boolean,
    Optional['use_ntp']         => Boolean,
    Optional['send_hostname']   => Boolean,
    Optional['use_hostname']    => Boolean,
    Optional['use_mtu']         => Boolean,
    Optional['hostname']        => Stdlib::Fqdn,
    Optional['use_routes']      => Boolean,
    Optional['route_metric']    => Integer,
  }]]                                                             $dhcp4_overrides = undef,
  Optional[Struct[{
    Optional['use_dns']         => Boolean,
    Optional['use_ntp']         => Boolean,
    Optional['send_hostname']   => Boolean,
    Optional['use_hostname']    => Boolean,
    Optional['use_mtu']         => Boolean,
    Optional['hostname']        => Stdlib::Fqdn,
    Optional['use_routes']      => Boolean,
    Optional['route_metric']    => Integer,
  }]]                                                             $dhcp6_overrides = undef,
  Optional[Boolean]                                               $accept_ra = undef,
  Optional[Array[Stdlib::IP::Address]]                            $addresses = undef,
  Optional[Stdlib::IP::Address::V4::Nosubnet]                     $gateway4 = undef,
  Optional[Stdlib::IP::Address::V6::Nosubnet]                     $gateway6 = undef,
  Optional[Struct[{
    Optional['search']          => Array[Stdlib::Fqdn],
    'addresses'                 => Array[Stdlib::IP::Address]
  }]]                                                             $nameservers = undef,
  Optional[Stdlib::MAC]                                           $macaddress = undef,
  Optional[Integer]                                               $mtu = undef,
  Optional[Boolean]                                               $optional = undef,
  Optional[Array[String]]                                         $optional_addresses = undef,
  Optional[Array[Struct[{
    Optional['from']            => Stdlib::IP::Address,
    'to'                        => Variant[Stdlib::IP::Address, Enum['0.0.0.0/0', '::/0']],
    'via'                       => Stdlib::IP::Address::Nosubnet,
    Optional['on_link']         => Boolean,
    Optional['metric']          => Integer,
    Optional['type']            => Enum['unicast', 'unreachable', 'blackhole', 'prohibited'],
    Optional['scope']           => Enum['global', 'link', 'host'],
    Optional['table']           => Integer,
  }]]]                                                            $routes = undef,
  Optional[Array[Struct[{
    'from'                      => Stdlib::IP::Address,
    'to'                        => Variant[Stdlib::IP::Address, Enum['0.0.0.0/0', '::/0']],
    Optional['table']           => Integer,
    Optional['priority']        => Integer,
    Optional['mark']            => Integer,
    Optional['type_of_service'] => Integer,
  }]]]                                                            $routing_policy = undef,

  # tunnels specific properties
  Optional[Enum['sit', 'gre', 'ip6gre', 'ipip', 'ipip6', 'ip6ip6',
                'vti', 'vti6', 'gretap', 'ip6gretap', 'isatap']]  $mode = undef,
  Optional[Stdlib::IP::Address::Nosubnet]                         $local = undef,
  Optional[Stdlib::IP::Address::Nosubnet]                         $remote = undef,
  Optional[Integer]                                               $key = undef,
  Optional[Struct[{
    'input'                     => Integer,
    'output'                    => Integer,
  }]]                                                             $keys = undef,

| -%>
    <%= $name %>:
    <%# common properties -%>
    <%- if $renderer { -%>
      renderer: <%= $renderer %>
    <%- } -%>
    <%- unless $dhcp4 =~ Undef { -%>
      dhcp4: <%= $dhcp4 %>
    <%- } -%>
    <%- unless $dhcp6 =~ Undef { -%>
      dhcp6: <%= $dhcp6 %>
    <%- } -%>
    <%- unless $ipv6_privacy =~ Undef { -%>
      ipv6-privacy: <%= $ipv6_privacy %>
    <%- } -%>
    <%- if $link_local { -%>
      link-local: <%= $link_local %>
    <%- } -%>
    <%- unless $critical =~ Undef { -%>
      critical: <%= $critical %>
    <%- } -%>
    <%- if $dhcp_identifier { -%>
      dhcp-identifier: <%= $dhcp_identifier %>
    <%- } -%>
    <%- if $dhcp4_overrides { -%>
      dhcp4-overrides:
        <%- unless $dhcp4_overrides[use_dns] =~ Undef { -%>
        use-dns: <%= $dhcp4_overrides[use_dns] %>
        <%- } -%>
        <%- unless $dhcp4_overrides[use_ntp] =~ Undef { -%>
        use-ntp: <%= $dhcp4_overrides[use_ntp] %>
        <%- } -%>
        <%- unless $dhcp4_overrides[send_hostname] =~ Undef { -%>
        send-hostname: <%= $dhcp4_overrides[send_hostname] %>
        <%- } -%>
        <%- unless $dhcp4_overrides[use_hostname] =~ Undef { -%>
        use-hostname: <%= $dhcp4_overrides[use_hostname] %>
        <%- } -%>
        <%- unless $dhcp4_overrides[use_mtu] =~ Undef { -%>
        use-mtu: <%= $dhcp4_overrides[use_mtu] %>
        <%- } -%>
        <%- if $dhcp4_overrides[hostname] { -%>
        hostname: <%= $dhcp4_overrides[hostname] %>
        <%- } -%>
        <%- unless $dhcp4_overrides[use_routes] =~ Undef { -%>
        use-routes: <%= $dhcp4_overrides[use_routes] %>
        <%- } -%>
        <%- if $dhcp4_overrides[route_metric] { -%>
        route-metric: <%= $dhcp4_overrides[route_metric] %>
        <%- } -%>
    <%- } -%>
    <%- if $dhcp6_overrides { -%>
      dhcp6-overrides:
        <%- unless $dhcp6_overrides[use_dns] =~ Undef { -%>
        use-dns: <%= $dhcp6_overrides[use_dns] %>
        <%- } -%>
        <%- unless $dhcp6_overrides[use_ntp] =~ Undef { -%>
        use-ntp: <%= $dhcp6_overrides[use_ntp] %>
        <%- } -%>
        <%- unless $dhcp6_overrides[send_hostname] =~ Undef { -%>
        send-hostname: <%= $dhcp6_overrides[send_hostname] %>
        <%- } -%>
        <%- unless $dhcp6_overrides[use_hostname] =~ Undef { -%>
        use-hostname: <%= $dhcp6_overrides[use_hostname] %>
        <%- } -%>
        <%- unless $dhcp6_overrides[use_mtu] =~ Undef { -%>
        use-mtu: <%= $dhcp6_overrides[use_mtu] %>
        <%- } -%>
        <%- if $dhcp6_overrides[hostname] { -%>
        hostname: <%= $dhcp6_overrides[hostname] %>
        <%- } -%>
        <%- unless $dhcp6_overrides[use_routes] =~ Undef { -%>
        use-routes: <%= $dhcp6_overrides[use_routes] %>
        <%- } -%>
        <%- if $dhcp6_overrides[route_metric] { -%>
        route-metric: <%= $dhcp6_overrides[route_metric] %>
        <%- } -%>
    <%- } -%>
    <%- unless $accept_ra =~ Undef { -%>
      accept-ra: <%= $accept_ra %>
    <%- } -%>
    <%- if $addresses { -%>
      addresses: 
      <%- $addresses.each |$address| { -%>
        - <%= $address %>
      <%- } -%>
    <%- } -%>
    <%- if $gateway4 { -%>
      gateway4: <%= $gateway4 %>
    <%- } -%>
    <%- if $gateway6 { -%>
      gateway6: <%= $gateway6 %>
    <%- } -%>
    <%- if $nameservers { -%>
      nameservers:
      <%- if $nameservers[search] { -%>
        search: <%= $nameservers[search] %>
      <%- } -%>
      <%- if $nameservers[addresses] { -%>
        addresses:
      <%- $nameservers[addresses].each |$address| { -%>
          - <%= $address %>
      <%- } -%>
      <%- } -%>
    <%- } -%>
    <%- if $macaddress { -%>
      macaddress: <%= $macaddress %>
    <%- } -%>
    <%- if $mtu { -%>
      mtu: <%= $mtu %>
    <%- } -%>
    <%- if $optional { -%>
      optional: <%= $optional %>
    <%- } -%>
    <%- if $optional_addresses { -%>
      optional-addresses:
      <%- $optional_addresses.each |$optional_address| { -%>
        - <%= $optional_address %>
      <%- } -%>
    <%- } -%>
    <%- if $routes { -%>
      routes:
      <%- $routes.each |$route| { -%>
        - to: <%= $route[to] %>
          via: <%= $route[via] %>
          <%- if $route[table] { -%>
          table: <%= $route[table] %>
          <%- } -%>
          <%- unless $route[on_link] =~ Undef { -%>
          on-link: <%= $route[on_link] %>
          <%- } -%>
          <%- if $route[metric] { -%>
          metric: <%= $route[metric] %>
          <%- } -%>
      <%- } -%>
    <%- } -%>
    <%- if $routing_policy { -%>
      routing-policy:
      <%- $routing_policy.each |$policy| { -%>
        - to: <%= $policy[to] %>
          from: <%= $policy[from] %>
          <%- if $policy[table] { -%>
          table: <%= $policy[table] %>
          <%- } -%>
          <%- if $policy[priority] { -%>
          priority: <%= $policy[priority] %>
          <%- } -%>
      <%- } -%>
    <%- } -%>
    <%# tunnels specific properties -%>
    <%- if $mode { -%>
      mode: <%= $mode %>
    <%- } -%>
    <%- if $local { -%>
      local: <%= $local %>
    <%- } -%>
    <%- if $remote { -%>
      remote: <%= $remote %>
    <%- } -%>
    <%- if $key { -%>
      key: <%= $key %>
    <%- } -%>
    <%- elsif $keys { -%>
      keys:
        input: <%= $keys[input] %>
        output: <%= $keys[output] %>
    <%- } -%>
